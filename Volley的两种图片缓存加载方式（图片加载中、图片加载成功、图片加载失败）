1. ImageLoader + ImageListener + 自定义ImageCache + LruCache
 // 实例化自定义的ImageCache对象
    ImageCache myImageCache = new MyImageCache();
    // 实例化ImageLoader
    ImageLoader loader = new ImageLoader(MyApplication.getQueue(), myImageCache);
    // 获取ImageListener,并设置加载中和加载失败的图片id
    ImageListener listener = ImageLoader.getImageListener(img, R.drawable.ic_launcher, R.drawable.ic_launcher);
    // 开始加载图片
    loader.get("http://img3.imgtn.bdimg.com/it/u=2673300425,3172968308&fm=21&gp=0.jpg", listener);  
    
    2. ImageLoader + NetworkImageView + 自定义ImageCache + LruCache
   
 // 实例化自定义的ImageCache对象
// 实例化ImageLoader对象
//设置加载中的图片id
networkImageView.setDefaultImageResId(R.drawable.ic_launcher);
// 设置加载错误的图片Id
networkImageView.setErrorImageResId(R.drawable.ic_launcher);
// 设置图片url和ImageLoader
networkImageView.setImageUrl("http://img3.imgtn.bdimg.com/it/u=2673300425,3172968308&fm=21&gp=0.jpg", loader)
;
自定义ImageCache
1、声明LruCache对象lru，在构造方法中实例化lru并重写sizeOf方法
public MyImageCache() {
    super();
    // 缓存区大小 10M
    lru = new LruCache<String, Bitmap>(1024*1024*10){
        @Override
        protected int sizeOf(String key, Bitmap value) {
            return value.getByteCount();
        }
    };
}

2、 重写etBitmap、putBitmap方法

  @Override
        public Bitmap getBitmap(String url) {
            return lru.get(url);
        }

        @Override
        public void putBitmap(String url, Bitmap bitmap) {
            lru.put(url, bitmap);

        }
        
 自定义View
三种方式：

1、继承自View
2、继承自ViewGroup
3、继承自别的组件，如TextView、Button...


// 画笔 平滑绘制
paint = new Paint(Paint.ANTI_ALIAS_FLAG);
// 画笔样式：镂空
paint.setStyle(Style.STROKE);
// 画笔颜色
paint.setColor(Color.RED);
// 画笔粗细
paint.setStrokeWidth(5);
// 画笔绘制文字的大小
paint.setTextSize(20);

整圆
// 参数1:圆心点x坐标,参数2:圆心点y坐标,参数3:半径,参数4:画笔
canvas.drawCircle(cx, cy, radius, paint);
椭圆
/ 参数1:左上角点的x值,参数2:左上角点的y值,参数3:右下角点的x值,参数4：右下角点的y值
// PS:如果左上角点的坐标大于右下角点的坐标 会导致绘制的圆无法显示
RectF oval = new RectF(left, top, right, bottom);

扇形、弧形
// 参数1:从oval中截取扇形,参数2:开始角度,参数3:扫描角度,参数4：是否使用中心(true:扇形，false:弧形)，参数5:画笔
canvas.drawArc(oval , startAngle, sweepAngle, useCenter, paint);

2. 画线
// 参数1:起点坐标的x值,参数2:起点坐标的y值,参数3:终点坐标的x值,参数4:终点坐标的y值,参数5:画笔
canvas.drawLine(startX, startY, stopX, stopY, paint)

3. 画文字(按照轨迹画文字)
// 参数1:要画的字符串,参数2:文字的起始点(左下角)的x值,参数3:文字的起始点(左下角)的y值,参数4:画笔
canvas.drawText(text, x, y, paint)
实现文字的屏幕居中(一字节 3.5dp)
canvas.drawText(text, getWidth()/2 - (text.getBytes().length * 3.5f)/2, 50, paint);
2、按照轨迹画文字
Path path = new Path();
// 圆形轨迹 Direction.CCW逆时针 Direction.CW 顺时针，直线轨迹用moveTo(x, y)、lineTo(x, y);
path.addCircle(getWidth()/2, getHeight()/2, 200, Direction.CW);

// 参数1:要画的文字,参数2:文字的轨迹,参数3:水平偏移量,参数4:垂直偏移量,参数5:画笔
canvas.drawTextOnPath(text, path, hOffset, vOffset, paint);

4.移动中心点(即默认0,0)的坐标
canvas.translate(x, y);

5. 旋转画布
参数1:旋转的度数，参数2：圆心点的x值的偏移值，参数3：圆心点的y值的偏移值
canvas.rotate(6, 0, 0);

@Override
public boolean onTouchEvent(MotionEvent event) {


//  invalidate();
   postInvalidate();

switch (event.getAction()) {
// 按下
case MotionEvent.ACTION_DOWN:
    ...
    break;
// 滑动
case MotionEvent.ACTION_MOVE:
   ...
    break;
// 松开
case MotionEvent.ACTION_UP:
    ...
    break;

}
return true;

~~2. 利用百度地图SDK 写一个最简单的示例~~
3. Path的moveTo(x,y)、lineTo(x,y)、close(); 

lineTo(float x, float y)方法：
用于从当前轮廓点绘制一条线段到x，y点,不指定初始轮廓点，默认从0,0点开始

moveTo(float x, float y)方法：
将起始轮廓点移至x，y坐标点，默认情况为0,0点

close()方法:
回到初始点形成封闭的曲线

4. RectF oval = new RectF(left, top, right, bottom)的四个参数

左上角点的x值,y值，右下角点的x值,y值
5. canvas.drawTextOnPath(str, path, 10, 30, paint);的偏移量

Android的Canvas提供了一个drawTextOnPath(String text,Path path,float hOffset,float vOffset,Paint paint)方法，该方法可以沿着Path路径绘制文本，
其中text指文本内容，hOffset参数指定水平偏移、vOffset指定垂直偏移

6. Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);的参数
Paint.ANTI_ALIAS_FLAG：抗锯齿
Paint.DITHER_FLAG：抗抖动

7paint.setStyle(Style.STROKE);画笔的样式
 
 画笔样式分三种：
1.Paint.Style.STROKE：描边(镂空)
2.Paint.Style.FILL_AND_STROKE：描边并填充
3.Paint.Style.FILL：填充
1、普通的画文字
canvas.drawOval(oval, paint);

8. path.addArc(oval, 80, 280);开始角度和扫描角度的位置
从右侧水平方向为0°，度数顺时针正向增加
9.计算文字宽度的三种方法
1getDesiredWidth
参数1:待计算的文本，参数2：起始下标，参数3：结束下标,参数4：TextPaint
 //  int textWidth1 = (int)Layout.getDesiredWidth(source, start, end, paint)

 例如：
 String text = "测试的text文本:text";
 int textWidth1 = (int) Layout.getDesiredWidth(text, 0, text.length(), new TextPaint());
 2创建一个包裹文字的最小矩形，拿该矩形的宽
  String text = "测试的text文本:text";
 Rect rect = new Rect();
 paint.getTextBounds(text, 0, text.length(), rect);
 int textWidth2  = rect.width();
 3直接返回参数字符串所占用的宽度
 String text = "测试的text文本:text";
 int textWidth3 = (int) paint.measureText(text);  
